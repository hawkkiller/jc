// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JcApi {
  /// Logs the client in with the specified app account number and name.
  ///
  /// [appAccountNumber] is the app account number to log in with.
  ///
  /// [name] is the name to log in with.
  ///
  /// Returns `true` if the login was started successfully, `false` otherwise.
  func login(appAccountNumber: String, name: String) throws -> Bool
  /// Initializes the engine.
  ///
  /// Returns `true` if the engine was initialized successfully, `false` otherwise.
  func initialize(appKey: String) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JcApiSetup {
  /// The codec used by JcApi.
  /// Sets up an instance of `JcApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JcApi?) {
    /// Logs the client in with the specified app account number and name.
    ///
    /// [appAccountNumber] is the app account number to log in with.
    ///
    /// [name] is the name to log in with.
    ///
    /// Returns `true` if the login was started successfully, `false` otherwise.
    let loginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcApi.login", binaryMessenger: binaryMessenger)
    if let api = api {
      loginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appAccountNumberArg = args[0] as! String
        let nameArg = args[1] as! String
        do {
          let result = try api.login(appAccountNumber: appAccountNumberArg, name: nameArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loginChannel.setMessageHandler(nil)
    }
    /// Initializes the engine.
    ///
    /// Returns `true` if the engine was initialized successfully, `false` otherwise.
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcApi.initialize", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appKeyArg = args[0] as! String
        do {
          let result = try api.initialize(appKey: appKeyArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JcCallControllerApi {
  /// Enables or disables the microphone.
  func enableMicrophone(value: Bool) throws
  /// Enables or disables the camera.
  func enableCamera(value: Bool) throws
  /// Enables or disables the speaker.
  func enableSpeaker(value: Bool) throws
  /// Switches the camera.
  func switchCamera() throws
  /// Terminates the call.
  func terminate() throws
  /// Initiates a call to the specified user.
  ///
  /// [userID] is the user ID of the user to call.
  ///
  /// [video] is whether the call should be a video call.
  ///
  /// Returns `true` if the call was initiated successfully, `false` otherwise.
  ///
  /// The client must be logged in before calling this method.
  func call(userID: String, video: Bool) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JcCallControllerApiSetup {
  /// The codec used by JcCallControllerApi.
  /// Sets up an instance of `JcCallControllerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JcCallControllerApi?) {
    /// Enables or disables the microphone.
    let enableMicrophoneChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.enableMicrophone", binaryMessenger: binaryMessenger)
    if let api = api {
      enableMicrophoneChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableMicrophone(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableMicrophoneChannel.setMessageHandler(nil)
    }
    /// Enables or disables the camera.
    let enableCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.enableCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      enableCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableCamera(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableCameraChannel.setMessageHandler(nil)
    }
    /// Enables or disables the speaker.
    let enableSpeakerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.enableSpeaker", binaryMessenger: binaryMessenger)
    if let api = api {
      enableSpeakerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableSpeaker(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableSpeakerChannel.setMessageHandler(nil)
    }
    /// Switches the camera.
    let switchCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.switchCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      switchCameraChannel.setMessageHandler { _, reply in
        do {
          try api.switchCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      switchCameraChannel.setMessageHandler(nil)
    }
    /// Terminates the call.
    let terminateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.terminate", binaryMessenger: binaryMessenger)
    if let api = api {
      terminateChannel.setMessageHandler { _, reply in
        do {
          try api.terminate()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      terminateChannel.setMessageHandler(nil)
    }
    /// Initiates a call to the specified user.
    ///
    /// [userID] is the user ID of the user to call.
    ///
    /// [video] is whether the call should be a video call.
    ///
    /// Returns `true` if the call was initiated successfully, `false` otherwise.
    ///
    /// The client must be logged in before calling this method.
    let callChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcCallControllerApi.call", binaryMessenger: binaryMessenger)
    if let api = api {
      callChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userIDArg = args[0] as! String
        let videoArg = args[1] as! Bool
        do {
          let result = try api.call(userID: userIDArg, video: videoArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      callChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol JcConferenceControllerApi {
  /// Enables or disables the microphone.
  func enableMicrophone(value: Bool) throws
  /// Enables or disables the camera.
  func enableCamera(value: Bool) throws
  /// Enables or disables the speaker.
  func enableSpeaker(value: Bool) throws
  /// Switches the camera.
  func switchCamera() throws
  /// Leaves the conference.
  func leave() throws
  /// Joins the specified conference.
  ///
  /// [conferenceID] is the ID of the conference to join.
  ///
  /// [password] is the password of the conference to join.
  ///
  /// Returns `true` if the conference was joined successfully, `false` otherwise.
  ///
  /// The client must be logged in before calling this method.
  func joinConference(conferenceID: String, password: String) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class JcConferenceControllerApiSetup {
  /// The codec used by JcConferenceControllerApi.
  /// Sets up an instance of `JcConferenceControllerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: JcConferenceControllerApi?) {
    /// Enables or disables the microphone.
    let enableMicrophoneChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.enableMicrophone", binaryMessenger: binaryMessenger)
    if let api = api {
      enableMicrophoneChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableMicrophone(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableMicrophoneChannel.setMessageHandler(nil)
    }
    /// Enables or disables the camera.
    let enableCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.enableCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      enableCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableCamera(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableCameraChannel.setMessageHandler(nil)
    }
    /// Enables or disables the speaker.
    let enableSpeakerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.enableSpeaker", binaryMessenger: binaryMessenger)
    if let api = api {
      enableSpeakerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! Bool
        do {
          try api.enableSpeaker(value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableSpeakerChannel.setMessageHandler(nil)
    }
    /// Switches the camera.
    let switchCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.switchCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      switchCameraChannel.setMessageHandler { _, reply in
        do {
          try api.switchCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      switchCameraChannel.setMessageHandler(nil)
    }
    /// Leaves the conference.
    let leaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.leave", binaryMessenger: binaryMessenger)
    if let api = api {
      leaveChannel.setMessageHandler { _, reply in
        do {
          try api.leave()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      leaveChannel.setMessageHandler(nil)
    }
    /// Joins the specified conference.
    ///
    /// [conferenceID] is the ID of the conference to join.
    ///
    /// [password] is the password of the conference to join.
    ///
    /// Returns `true` if the conference was joined successfully, `false` otherwise.
    ///
    /// The client must be logged in before calling this method.
    let joinConferenceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.JcConferenceControllerApi.joinConference", binaryMessenger: binaryMessenger)
    if let api = api {
      joinConferenceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let conferenceIDArg = args[0] as! String
        let passwordArg = args[1] as! String
        do {
          let result = try api.joinConference(conferenceID: conferenceIDArg, password: passwordArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      joinConferenceChannel.setMessageHandler(nil)
    }
  }
}
